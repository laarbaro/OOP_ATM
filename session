// -------------------------------[Session] class-----------------------------------
// -------------------------------[Session] class-----------------------------------
class Session {
private:
    ATM * atm ; // ATM 객체 가리키는 포인터
    Account* account ; // 계좌 객체 가리키는 포인터
    Card* card ;
    vector<Transaction> transctionHistoryOfSession ; // 세션 동안 거래 내역 저장 -> 하고 뭐햇는지 display 해야함. 하나 저장 후 보여주기 (이걸 함수로먼들지 그냥 코드를 짤지는선택 ) + 백터 구조가 어떤지 알려줘서 ATM에 할수 있게 하기
    bool authorizationSignal ; // 계좌 비밀번호 인증 결과 나타내는 bool값
    int aouthorizationCount ; // 비밀번호 인증 실패 횟수
    int withdrawalCount ; // 출금 횟수 기록
    bool primarySignal ;  // 현재 계좌 은행 정보와 ATM 주거래 은행이 동일한지 여부를 나타내는 bool 값
    int currentTransactionID;

public:

    Session() : currentTransactionID(1) {}
    void CashDeposit(map<int, int>, int x);
    //void Session::CashDeposit(map<int, int> amount, int x)
    void CheckDeposit(unsigned long long amount, int x);
    void Withdrawal(unsigned long long amount, int x);
    void CashTransfer(map<int, int>, Account* destination, int x);
    void AccountTransfer(unsigned long long amount, Account* destination, int x);
    bool Authorization(string password) {return account->verifyPW(password);}
    
    int GetNextTransactionID() {
        return currentTransactionID++;
    }
    
};

/*-------------- Methods of Session Class --------------*/

//1. 현금 입금 함수
void Session::CashDeposit(map<int, int> amount, int x) { // 야기서 x 는 한국어 인지 아닌지

    unsigned long long fee = 0;
    if (!primarySignal) fee = 1000;

    // ATM에 화폐를 추가합니다.
    atm->SetAvailableCash(amount,true);  // ATM에 돈을 추가하는거면true, 빼는 거면 false 맞는지 확인 필요.

    // 계좌에 입금합니다.
    unsigned long long totalAmount = 0;
    for (const auto& entry : amount) {
        int denomination = entry.first;
        int count = entry.second;
        totalAmount += (denomination * count);
    }
    int transactionID = GetNextTransactionID();
    account->deposit(totalAmount - fee);

    
    
    // ------[history 관리]
    Transaction CashDepositTransaction(transactionID, card->getCardNumber(), "CashDeposit", totalAmount) ;
    transctionHistoryOfSession.push_back(CashDepositTransaction);
    //------------------
    
    
    
    // 거래 정보를 출력합니다. ~에는 뱅크 이름이랑 어카운트 가져오기 기능을 추가 해야함.
    if (x == 0)
        cout << "~에 " << totalAmount << " 원이 입금되었습니다." << endl;
    else
        cout << "~에 " << totalAmount << " won has been deposited." << endl;

    // 현재 잔액을 출력합니다.
    if (x == 0) cout << "/n현재 잔액 : ";
    else cout << "\nCurrent Available Cash : ";
    cout << account->getBalance();
    
    if (x == 0) cout << " 원" << endl;
    else cout << " won" << endl;

    cout << "\n";
}




// 2. 수표를 입금해주는 함수
void Session::CheckDeposit(unsigned long long amount, int x) {
    unsigned long long fee = 0;
    if (!primarySignal) fee = 1000;
    unsigned long long totalAmount = amount - fee ;
        account->deposit(totalAmount);
    
    
    //질문 , ATM에는 돈을 안넣나요. ? .?
    
    // ------[history 관리]
    int transactionID = GetNextTransactionID();
    Transaction CheckDepositTransaction(transactionID, card->getCardNumber(), "CheckDeposit", totalAmount) ;
    transctionHistoryOfSession.push_back(CheckDepositTransaction);
    //-------------------
    
    // 거래 정보를 출력합니다. ~에는 뱅크 이름이랑 어카운트 가져오도록 수정합니다.
    if (x == 0)
        cout << "~에 " << totalAmount << " 원이 입금되었습니다." << endl;
    else
        cout << "~에 " << totalAmount << " won has been deposited." << endl;

    
    //현재 잔액 출력
    if (x == 0) cout << "\n현재 잔액 : ";
    else cout << "\nCURRENT BALANCE : ";
    cout << account->getBalance();
    
    if (x == 0) cout << " 원" << endl;
    else cout << " won" << endl;
    
    cout << "\n";
}


// 3. 출금해주는 함수
void Session::Withdrawal(const map<int, int>& amount, int x) {
    unsigned long long fee = 1000;
    if (!primarySignal) fee = 2000;

    // ATM의 사용 가능한 현금을 가져옴
    map<int, int> availableCash = atm->GetAvailableCash();

    
    unsigned long long totalAvailableCash = 0;
    for (const auto& entry : availableCash) {
        int denomination = entry.first;
        int count = entry.second;
        totalAvailableCash += (denomination * count);
    }

    unsigned long long totalAmount = 0;
    for (const auto& entry : amount) {
        int denomination = entry.first;
        int count = entry.second;
        totalAmount += (denomination * count);
    }

    if (totalAvailableCash < totalAmount + fee) {
        if (x == 0) cout << " 현재 기기 내 현금이 부족합니다\n" << endl;
        else cout << " OUR ATM DOESN'T HAVE ENOUGH MONEY\n" << endl;
    } else if (totalAmount + fee > account->getBalance()) {
        if (x == 0) cout << "잔액 부족\n" << endl;
        else cout << " YOU DON'T HAVE ENOUGH MONEY\n" << endl;
    } else {
        // 출금금액과 수수료를 ATM과 계좌에서 각각 차감
        atm->SetAvailableCash(amount,false);  // 가능한 돈을 차감하는 함수로 가정
        account->withdraw(totalAmount + fee);

        int transactionID = GetNextTransactionID();
        account->deposit(totalAmount - fee);

        
        // ------[history 관리]
        Transaction withdrawTransaction(transactionID, card->getCardNumber(), "Withdraw", totalAmount);
        transctionHistoryOfSession.push_back(withdrawTransaction);
        //------------------

        // 결과 출력
        // 거래 정보를 출력합니다. ~에는 뱅크 이름이랑 어카운트 가져오기 ?
        if (x == 0)
            cout << "~에 " << totalAmount << " 원이 입금되었습니다." << endl;
        else
            cout << "~에 " << totalAmount << " won has been deposited." << endl;

        withdrawalCount++;  // 세션 종료 !! 변수가 있음 ATM에서 가져가면 될듯 ??
        if (x == 0) cout << "\n현재 잔액 : ";
        else cout << "\nCURRENT BALANCE : ";
        cout << account->getFundInfo();
        if (x == 0) cout << " 원" << endl;
        else cout << " won" << endl;
        cout << "\n";
    }
}



// 4. 현금 송금하는 함수
void Session::CashTransfer(map<int, int> amount, Account* destination, int x) { //destination는 이체하고 자 하는 계좌.

    unsigned long long fee = 5000 ;
    
    // ATM에게 현금을 추가합니다.
    atm->SetAvailableCash(amount, true);
    
    
 // 수수료 빼고 계좌에 입금
    for (const auto& entry : amount) {
        int denomination = entry.first;
        int count = entry.second;
        unsigned long long totalAmount = (denomination * count);
    }
    
    unsigned long long totaltotalAmount =  totalAmount - fee
    destination-> deposit ( utotaltotalAmount ) ;
    
    int transactionID = GetNextTransactionID();
    
    // ------[history 관리]
    Transaction CashTransferTransaction(transactionID, card->getCardNumber(), "CashTransfer", totaltotalAmount) ;
    transctionHistoryOfSession.push_back(CashTransferTransaction);
    //------------------

   
    // 이체 거래의 정보를 출력합니다. (x가 0이면 한국어, 1이면 영어 출력)
    if (x == 0)
        cout << newTransaction.getKoreanInformation() << endl;
    else
        cout << newTransaction.getEnglishInformation() << endl;

    // 현재 계좌의 잔액을 출력합니다.
    if (x == 0)
        cout << "\n현재 잔액 : ";
    else
        cout << "\nCURRENT BALANCE : ";
    cout << account->getBalance();

    // 통화 단위를 출력합니다.
    if (x == 0)
        cout << " 원" << endl;
    else
        cout << " won" << endl;

    // 개행 문자를 출력합니다.
    cout << "\n";
}


//5. 계좌 송금하는 함수
//수정이 많이 필요합니다.
//계좌 포인터 건드는 법을 모르겠어요 ㅠ
void Session::AccountTransfer(unsigned long long amount, Account* destination, int x) {
    
    // 이체 수수료(fee)를 초기화합니다.
    unsigned long long fee;

    // 송금 계좌와 수취 계좌의 은행 이름을 가져옵니다.
    string accountNum = (findAccount(account->getAccountNum()))->getBankName();
    
    
    string destNum = (findAccountOfBank(destination->getAccountNumber()))->getBankName();

    // 은행이 같고, 현재 세션이 주거래 은행인 경우 수수료는 2000원,
    // 은행이 같고, 현재 세션이 타은행 거래 가능인 경우 수수료는 3000원,
    // 은행이 다른 경우 수수료는 4000원으로 설정합니다.
    if ((accountNum.compare(destNum) == 0) && (primarySignal == true))
        fee = 2000;
    else if ((accountNum.compare(destNum) == 0) && (primarySignal == false))
        fee = 3000;
    else
        fee = 4000;

    // 잔액이 충분하지 않으면 메시지 출력 후 종료합니다.
    if (amount + fee > account->getBalance()()) {
        if (x == 0)
            cout << "잔액 부족\n" << endl;
        else
            cout << "YOU DON'T HAVE ENOUGH MONEY\n" << endl;
    } else {
        // 송금 계좌에서 송금액과 수수료를 차감합니다.
        account->withdraw(<#int amount#>)(amount + fee);

        // 수취 계좌에 송금액을 추가합니다.
        destination->deposit(<#int amount#>)(amount);

        // ------[history 관리]
        AccountTransferTransaction newTransaction(destination, account, amount, accountNum, destNum);
        destination->addTransaction(&newTransaction);

        transactionHistoryOfSession.push_back(newTransaction);
        //------------------
        

        // 송금 거래의 정보를 출력합니다. (x가 0이면 한국어, 1이면 영어 출력)
        if (x == 0)
            cout << newTransaction.getKoreanInformation() << endl;
        else
            cout << newTransaction.getEnglishInformation() << endl;

        // 현재 송금 계좌의 잔액을 출력합니다.
        if (x == 0)
            cout << "\n현재 잔액 : ";
        else
            cout << "\nCURRENT BALANCE : ";
        cout << account->getFundInfo();

        // 통화 단위를 출력합니다.
        if (x == 0)
            cout << " 원" << endl;
        else
            cout << " won" << endl;

        // 개행 문자를 출력합니다.
        cout << "\n";
    }
}


// -------------child of Session class ---------------
class KoreanSession : public Session {
public:
    void mainKoreanDisplay() {
        cout << atm->getPrimaryBank() << " 은행" << endl;
        if (atm->getSingleInfo() == 0) cout << "주거래 은행 전용>" << endl;
        else cout << "타은행 거래 가능>" << endl;
    }
    
    KoreanSession(ATM* iatm) {
        // 세션 파라미터 초기화
        atm = iatm;
        primarySignal = true;
        authorizationCount = 0;
        withdrawalCount = 0; // 이거 처리 !
        authorizationSignal = true;
        
        bool validAccount = true; // 계좌 정보 유무
        string inputAccount;
        mainKoreanDisplay();
        
        cout << " 계좌 번호를 입력해주세요\n" << endl;
        cout << "계좌 번호 : ";
        cin >> inputAccount;
        
        //이 부분 어떻게 할지 .. ?
        Bank* temp = this->myBank->findAccountOfBank(inputAccount);
        
        
        if (temp == nullptr) {
            mainKoreanDisplay();
            cout << "입력한 계좌번호가 존재하지 않습니다." << endl;
            validAccount = false;
        }
        else { //계좌가 존재하는 경우
            if ( (atm->GetPrimaryBank()).compare(temp->getBankName()) == 0 ) { //현재 세션에서 사용 중인 ATM 객체(atm)의 기본 은행 정보와, 입력된 계좌 번호에 해당하는 Bank 객체의 은행 이름을 비교 ! 두 은행 이름이 같다면, 현재 세션에서 사용 중인 은행이라는 것을 의미
                account = temp->findAccountOfBank(inputAccount); //같다면, 해당 은행에서 입력된 계좌 번호에 해당하는 Account 객체를 찾아서 account 포인터에 저장합니다. 이렇게 하면 현재 세션에서 사용할 수 있는 계좌를 설정
            } else {
                if (atm->IsMultiBank() == 0 ) { //타은행 계좌를 사용할 수 없다면
                    mainKoreanDisplay();
                    cout << "타은행 계좌는 사용하실 수 없습니다\n" << endl;
                    validAccount = false;
                } else {
                    primarySignal = false;
                    account = temp->findAccountOfBank(inputAccount);
                }
            }
        }
        
        if (validAccount) { // 유효한 계좌인 경우 (비밀번호 인증 로직)
            
            for (int i = 1; i < 4; i++) { // 비밀번호 3번까지 입력 가능 !
                string inputPassword;
                mainKoreanDisplay();
                cout << "비밀번호를 입력해주세요\n" << endl;
                cout << "비밀번호 : ";
                cin >> inputPassword;
                if (Authorization(inputPassword)) {
                    authorizationSignal = true;
                    break;
                }
                else {
                    authorizationSignal = false;
                    authorizationCount ++;
                    mainKoreanDisplay();
                    cout << "비밀번호를 " << authorizationCount << "회 틀렸습니다\n" << endl;
                }
            }
            
            if (authorizationSignal == false) {
                mainKoreanDisplay();
                cout << " 비밀번호 입력을 3회 실패하여 세션이 종료됩니다" << endl;
            }
            
            else { //비밀번호 인증 통과 후 로직들
                bool sessionExitSignal = true;
                while (sessionExitSignal) {
                    mainKoreanDisplay();
                    cout << "원하시는 서비스를 선택해주세요\n" << endl;
                    cout << "1. 입금    2. 출금   3. 송금   4. 거래 내역 조회   5. 서비스 종료\n" << endl; //거래 3번 이상 시 세션 새로 열기
                    cout << "번호 입력 : ";
                    int transactionNum = -1;
                    cin >> transactionNum;
                    if (cin.fail() == true) { // 사용자의 입력이 숫자가 아닌 경우
                        cout << "유효하지 않은 번호입니다." << endl;
                        cin.clear();
                        cin.ignore(100, '\n');
                        continue; //for문 다시 돌아가서 선택하게 하기.
                    }
                    
                    if (transactionNum == 1) { // 입금 (1000월 , 5000원 , 10000원, 50000원을 받아야함. )
                        mainKoreanDisplay() ;
                        cout << " 입금 서비스 입니다. \n" << endl;
                        cout << " 1. 현금 입금     2. 수표 입금\n" << endl;
                        cout << "번호 입력 : ";
                        int depositinput = -1;
                        cin >> depositinput;
                        
                        if (cin.fail() == true) {
                            cout << "유효하지 않은 번호입니다." << endl; //유효하지 않은 입력값 일때 !
                            cin.clear();
                            cin.ignore(100, '\n');
                            continue;
                        }
                        
                        
                        
                        
                        
                        
                        if ( depositinput == 1) {
                            while (true) {
                                
                                mainKoreanDisplay() ;
                                map<int, int> billCounts; // 각 지폐의 갯수를 저장할 맵
                                cout << "입금하실 지폐의 종류를 선택해주세요\n" << endl;
                                cout << "1. 1000원  2. 5000원  3. 10000원  4. 50000원 5. 종료" << endl;
                                cout << "번호 입력 : ";
                                int bill = -1;
                                cin >> bill;
                                
                                if (cin.fail() == true || bill < 1 || bill > 4) {
                                    cout << "유효하지 않은 번호입니다." << endl;
                                    cin.clear();
                                    cin.ignore(100, '\n');
                                    continue;
                                }
                                
                                if (bill == 5) {
                                    // 사용자가 종료를 선택했을 때 루프를 종료
                                    break;
                                }
                                
                                int billType = -1;
                                
                                if (bill == 1 ) {
                                    
                                    billType = 1000 ;
                                    
                                } else if ( bill == 2 ){
                                    billType = 5000 ;
                                    
                                } else if (bill== 3){
                                    billType = 10000 ;
                                    
                                } else if (bill == 4) {
                                    billType = 50000 ;
                                    
                                }
                                
                                cout << "입금하실 지폐의 장 수를 입력해주세요: ";
                                int numBill = -1;
                                
                                cin >> numBill;
                                if (cin.fail() == true || numBill <= 0) {
                                    cout << "유효하지 않은 번호입니다." << endl;
                                    cin.clear();
                                    cin.ignore(100, '\n');
                                    continue;
                                }
                                
                                // 각 지폐 종류와 갯수를 맵에 저장
                                billCounts[billType] = numBill;
                                
                                
                                //-------한번에 거래 가능한 장수
                                
                                if (numBill > 50) {
                                    cout << " 거래 1회 당 입금 가능한 장 수를 초과하셨습니다\n" << endl;
                                    break;
                                    
                                }
                                
                            }
                            
                            CashDeposit(billCounts, 0);
                            
                        } else if (depositinput == 2) {
                            // 수표 입금 처리
                            // 사용자에게 10만원권 수표의 장 수를 입력 받아 입금 처리합니다.
                            
                            cout << "수표를 입력해주세요\n" << endl;
                            cout << "수표 : ";
                            int numBill = -1;
                            cin >> numBill;
                            
                            if (cin.fail() == true) { //잘못입력시
                                cout << "유효하지 않은 번호입니다." << endl;
                                cin.clear();
                                cin.ignore(100, '\n');
                                continue;
                            }
                            if ((0 < numBill) && (numBill <= 30)) {inAmount = 100000 * numBill; break;}
                            else if (numBill > 30) {
                                atm->mainKoreanDisplay();
                                cout << "       거래 1회 당 입금 가능한 장 수를 초과하셨습니다\n" << endl;
                            } else {
                                cout << "유효하지 않은 번호입니다." << endl;
                            }
                            
                            CheckDeposit(inAmount, 0);
                            
                            
                        } else {
                            cout << "유효하지 않은 번호입니다." << endl;
                        }
                        
                        
                        
                    }
                    
                    eles if (transactionNum == 2) {// 출금
                        //세션이 닫치게 만들어야함 !!!!!!!!!
                        
                        if (withdrawalCount == 3) {
                            cout << "       세션 1회 당 출금 가능한 액수를 초과하셨습니다\n" << endl;
                        }
                        
                        else {
                            while (true){
                                mainKoreanDisplay();
                                map<int, int> billCounts; // 각 지폐의 갯수를 저장할 맵
                                cout << "출금하실 지폐의 종류를 선택해주세요\n" << endl;
                                cout << "1. 1000원  2. 5000원  3. 10000원  4. 50000원  5. 종료" << endl;
                                cout << "번호 입력 : ";
                                int bill = -1;
                                cin >> bill;
                                
                                if (cin.fail() == true || bill < 1 || bill > 5) {
                                    cout << "유효하지 않은 번호입니다." << endl;
                                    cin.clear();
                                    cin.ignore(100, '\n');
                                    continue;
                                }
                                
                                if (bill == 5) {
                                    // 사용자가 종료를 선택했을 때 루프를 종료
                                    break;
                                }
                                
                                if (bill == 1) {
                                    
                                    billType = 1000;
                                    
                                } else if (bill == 2) {
                                    billType = 5000;
                                    
                                } else if (bill == 3) {
                                    billType = 10000;
                                    
                                } else if (bill == 4) {
                                    billType = 50000;
                                    
                                }
                                
                                cout << "입금하실 지폐의 장 수를 입력해주세요: ";
                                int numBill = -1;
                                
                                cin >> numBill;
                                if (cin.fail() == true || numBill <= 0) {
                                    cout << "유효하지 않은 번호입니다." << endl;
                                    cin.clear();
                                    cin.ignore(100, '\n');
                                    continue;
                                    
                                }
                                
                                billCounts[billType] = numBill;
                                // 한 번에 거래 가능한 장 수
                                if (numBill > 50) {
                                    cout << "거래 1회 당 입금 가능한 장 수를 초과하셨습니다." << endl;
                                    break;
                                    
                                }
                            }
                            Withdraw(billCounts, 0) ;
                            
                        }
                        
                        
                    }
                    
                    
                    else if (transactionNum == 3) { // 송금
                        cout << "송금 서비스 입니다\n" << endl;
                        cout << "             1. 계좌 송금 (계좌 -> 계좌)" << endl;
                        cout << "             2. 현금 송금 (현금 -> 계좌)\n" << endl;
                        cout << "==================================================" << endl;
                        cout << "번호 입력 : ";
                        int transferNum = -1;
                        cin >> transferNum;
                        if (cin.fail() == true) {
                            cout << "유효하지 않은 번호입니다." << endl;
                            cin.clear();
                            cin.ignore(100, '\n');
                            continue;
                        }
                        
                        if (transferNum == 1) { // Account Transfer
                            cout << "계좌 송금 서비스를 선택하셨습니다\n" << endl;
                            cout << "송금하실 금액을 입력해주십시오\n" << endl;
                            cout << "송금 금액 : ";
                            unsigned long long inAmount = -1;
                            cin >> inAmount;
                            if (cin.fail() == true) {
                                cout << "유효하지 않은 번호입니다." << endl;
                                cin.clear();
                                cin.ignore(100, '\n');
                                continue;
                            }
                            if (inAmount < 0) { cout << "유효하지 않은 번호입니다." << endl;}
                            else if (inAmount == 0) {
                                cout << "0 원을 송금할 수는 없습니다\n" << endl;
                            } else {
                                mainKoreanDisplay() ;
                                cout << "          받으실 분의 계좌 번호를 입력해주십시오\n" << endl;
                                cout << "받으실 분 계좌 번호 : ";
                                string inDest;
                                cin >> inDest;
                                if (findAccount(inDest) == nullptr) { //Global Class 에 있다고 일단 가정
                                    cout << "입력한 계좌번호가 존재하지 않습니다\n" << endl;
                                } else {
                                    AccountTransfer(inAmount, findAccount(inDest) , 0); << endl;
                                    //매개변수 method of ATM이랑 같이해서 확인해 봐야함.
                                }
                            }
                        }else { // Exception
                            cout << "입력한 계좌번호가 존재하지 않습니다\n" << endl;
                        }
                        
                    }
                    
                    // !!!!!!!!!!!!!!!!!히스토리.....
                    
                    else if (transactionNum == 4) { // 거래 내역 조회// Transaction History
                        
                        cout << "거래 내역 조회를 선택하셨습니다\n" << endl;
                        cout << " 해당 계좌의 거래내역은 다음과 같습니다\n" << endl;
                        vector<Transaction> temp = account->getTransactionHistoryOfAccount();
                        if (temp.size() == 0) {
                            cout << "현재 잔액 : " << account->getFundInfo() << " 원\n" << endl;
                            cout << "            해당 계좌에는 거래 내역이 업습니다\n" << endl;
                        } else {
                            for (int i = 0; i < temp.size(); i++) {
                                cout << temp[i].getKoreanInformation() << endl;
                            }
                            cout << "\n현재 잔액 : " << account->getFundInfo() << " 원\n" << endl;
                        }
                        
                    }
                    
                    if (transactionNum == 5) { // 서비스 종료
                        
                        sessionExitSignal = false;
                    }
                    
                    
                    
                    
                }
                
                cout << "세션 종료" << endl;
                cout << "ATM을 이용해주셔서 감사합니다\n" << endl;
                if (transactionHistoryOfSession.size() == 0) {  //히스토리 부분
                    cout << "해당 세션에는 거래 내역이 없습니다\n" << endl;
                } else {
                    cout << "해당 세션 내 총 거래 내역" << endl;
                    
                    atm->addTransaction(transactionHistoryOfSession); //ATM에 넘겨주기.
                    
                    for (int i = 0; i < transactionHistoryOfSession.size(); i++) {
                        cout << transactionHistoryOfSession[i].getKoreanInformation() << endl; // 내역 출력
                    }
                    
                }
            }
        }

        
    } ; //class 끝
